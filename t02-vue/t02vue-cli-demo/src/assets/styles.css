/*--------------------------------全局设置---------------------------------
 --------------------------------全局设置---------------------------------
 --------------------------------全局设置---------------------------------
 --------------------------------全局设置---------------------------------
 --------------------------------全局设置---------------------------------
 --------------------------------全局设置---------------------------------
*/
* {
    margin: 0;
    padding: 0;
    border: none;
    /**
    轮廓（outline）是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。 轮廓（outline）属性指定元素轮廓的样式、颜色和宽度。
     */
    outline: none;
    /**
content-box 是默认值。如果你设置一个元素的宽为 100px，那么这个元素的内容区会有 100px 宽，
并且任何边框和内边距的宽度都会被增加到最后绘制出来的元素宽度中。
border-box 告诉浏览器：你想要设置的边框和内边距的值是包含在 width 内的。
也就是说，如果你将一个元素的 width 设为 100px，那么这 100px 会包含它的 border 和 padding，
内容区的实际宽度是 width 减去 (border + padding) 的值。大多数情况下，这使得我们更容易地设定一个元素的宽高。
     */
    box-sizing: border-box !important;
}


body {
    min-width: 1024px;
    /**
    1、px
px就是pixel的缩写，意为像素。px就是一张图片最小的一个点，一张位图就是千千万万的这样的点构成的，
比如常常听到的电脑像素是1024x768的，表示的是水平方向是1024个像素点，垂直方向是768个像素点。
    2、em
参考物是父元素的font-size，具有继承的特点。如果自身定义了font-size按自身来计算（浏览器默认字体是16px），整个页面内1em不是一个固定的值。
    3、rem
css3新单位，相对于根元素html（网页）的font-size，不会像em那样，依赖于父元素的字体大小，而造成混乱。
4、%
一般宽泛的讲是相对于父元素，但是并不是十分准确。
1、对于普通定位元素就是我们理解的父元素
2、对于position: absolute;的元素是相对于已定位的父元素
3、对于position: fixed;的元素是相对于 ViewPort（可视窗口）
    4、vw
css3新单位，viewpoint width的缩写，视窗宽度，1vw等于视窗宽度的1%。
举个例子：浏览器宽度1200px, 1 vw = 1200px/100 = 12 px。
    5、vh
css3新单位，viewpoint height的缩写，视窗高度，1vh等于视窗高度的1%。
举个例子：浏览器高度900px, 1 vh = 900px/100 = 9 px。
     */
    /* height: calc(100vh); */
    font-size: 15px;
    color: #1a1a1a;
}

/* 超链接设置 */
a {
    /*下划线*/
    text-decoration: none;
    color: #8590a6;
}

/*a标签悬浮*/
a:hover {
    color: #1a1a1a;
}

/* 去除，li标签标记是实心圆。*/
ul,
li {
    list-style: none;
}

/*
----------------------------宽高设置--------------------------------------
从这里开始，就要记住使用了

 */

/* 填充效果 */

.fill {
    width: 100%;
    height: 100%;
}

/* 页面容器,80%宽度,水平居中 */
.container {
    width: 80%;
    margin-left: auto;
    margin-right: auto;
}

/* 常用的高度设置 */
.full-height {
    height: 100%;
}

.normal-height {
    height: 70%;
}

.half-height {
    height: 50%;
}

.min-height {
    height: 30%;
}


/*
---------------------display的常用属性--------------------------
---------------------display的常用属性--------------------------
---------------------display的常用属性--------------------------
---------------------display的常用属性--------------------------
---------------------display的常用属性--------------------------
---------------------display的常用属性--------------------------
 */
/*消失*/
.d-none {
    display: none;
}

/*inline、inline-block前后无换行，允许元素水平一个接一个排列。*/
.d-inline {
    display: inline;
}

/**/
.d-inline-block {
    display: inline-block;
}

/*块级元素 block元素前后有换行，一般占满父元素的整个宽度*/
.d-block {
    display: block;
}

/*
--------------------------水平方向对齐方式------------------------------
--------------------------水平方向对齐方式------------------------------
--------------------------水平方向对齐方式------------------------------
--------------------------水平方向对齐方式------------------------------
--------------------------水平方向对齐方式------------------------------
--------------------------水平方向对齐方式------------------------------
 */
.text-center {
    text-align: center;
}

.text-left {
    text-align: left;
}

.text-right {
    text-align: right;
}

/**
1，可以让文本两端对齐；
2，文本的最后一行或者单独一行设置是无效的；
3，对元素没有效果只对元素内文本有效果；
 */
.text-justify {
    text-align: justify;
}

.pull-right {
    float: right;
}

/*
----------------------------flex布局设置------------------------------
----------------------------flex布局设置------------------------------
----------------------------flex布局设置------------------------------
----------------------------flex布局设置------------------------------
----------------------------flex布局设置------------------------------
 */
/*此时没有为父元素main设置宽度，默认为100%；*/
.d-flex {
    display: flex;
}

/*此处虽然木有给父元素设置宽度，但是父元素默认会根据子元素的宽高去自适应。*/
.d-inline-flex {
    display: inline-flex;
}

/**
flex-direction属性决定主轴的方向（即项目的排列方向）。
row（默认值）：主轴为水平方向，起点在左端。
row-reverse：主轴为水平方向，起点在右端。
column：主轴为垂直方向，起点在上沿。
column-reverse：主轴为垂直方向，起点在下沿
 */
.flex-row {
    flex-direction: row;
}

.flex-column {
    flex-direction: column;
}

.flex-row-reverse {
    flex-direction: row-reverse;
}

.flex-column-reverse {
    flex-direction: column-reverse;
}

/**
flex-wrap 属性指定 flex 元素单行显示还是多行显示。如果允许换行，这个属性允许你控制行的堆叠方向。
nowrap
flex 的元素被摆放到到一行，这可能导致 flex 容器溢出。cross-start 会根据 flex-direction 的值等价于 start 或 before。为该属性的默认值。
wrap
flex 元素 被打断到多个行中。cross-start 会根据 flex-direction 的值等价于 start 或before。cross-end 为确定的 cross-start 的另一端。
wrap-reverse
和 wrap 的行为一样，但是 cross-start 和 cross-end 互换。
 */
.flex-wrap {
    flex-wrap: wrap;
}

.flex-nowrap {
    flex-wrap: nowrap;
}

.flex-wrap-reverse {
    flex-wrap: wrap-reverse;
}

/* 自动拉伸和缩小,适应父容器
flex属性是flex-grow，flex-shrink和flex-basis这3个CSS属性的缩写
 flex-basis 用于设置子项的占用空间。 如果设置了值，则子项占用的空间为设置的值
 ；如果没设置或者为auto，那子项的空间为width/height 的值。
 对于子项1，flex-basis 如果设置默认是auto，子项占用的宽度使用width 的宽度
 ，width没设置也为auto，所以子项占用空间由内容决定。
 flex-grow 表示当有剩余空间的时候，分配给项目的比例
flex-shrink 表示空间不足的时候，项目缩小的比例
flex-basis 表示分配空间之前，项目占据主轴的空间
 */
.flex-fill {
    flex: 1 1 auto;
}

/* 不拉伸 */
.flex-grow-0 {
    flex-grow: 0;
}

/*拉伸*/
.flex-grow-1 {
    flex-grow: 1;
}

/* 不缩小 */
.flex-shrink-0 {
    flex-shrink: 0;
}

/*缩小*/
.flex-shrink-1 {
    flex-shrink: 1;
}

.flex-1{
    flex: 1;
}

/* 主轴方向的几种对齐方式,默认为flex-start,从左到右或从上到下
justify-content属性定义了项目在主轴上的对齐方式。
flex-start（默认值）：左对齐
flex-end：右对齐
center： 居中
space-between：两端对齐，项目之间的间隔都相等。
space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。
*/
.justify-content-start {
    justify-content: flex-start;
}

.justify-content-end {
    justify-content: flex-end;
}

.justify-content-center {
    justify-content: center;
}

.justify-content-between {
    justify-content: space-between;
}

.justify-content-around {
    justify-content: space-around;
}

/* 副轴方向的几种对齐方式,默认为strech也就是拉伸效果 */
.align-items-start {
    align-items: flex-start;
}

.align-items-end {
    align-items: flex-end;
}

.align-items-center {
    align-items: center;
}

.align-items-baseline {
    align-items: baseline;
}

.align-items-stretch {
    align-items: stretch;
}


/*
----------------------行列嵌套flex布局------------------------------------
----------------------行列嵌套flex布局------------------------------------
----------------------行列嵌套flex布局------------------------------------
----------------------行列嵌套flex布局------------------------------------
----------------------行列嵌套flex布局------------------------------------
----------------------行列嵌套flex布局------------------------------------
 */
.row {
    display: flex;
    flex-wrap: wrap;
}

/* 各种定宽的flex元素,需要嵌套在.row元素下
 ##flex-basis (default:auto) 这个属性值的作用也就是width的替代品。 如
 果子容器设置了flex-basis或者width，那么在分配空间之前，他们会先跟父容器预约这么多的空间，
 然后剩下的才是归入到剩余空间，然后父容器再把剩余空间分配给设置了flex-grow的容器。
 如果同时设置flex-basis和width，那么width属性会被覆盖，也就是说flex-basis的优先级比width高。
 有一点需要注意，如果flex-basis和width其中有一个是auto，那么另外一个非auto的属性优先级会更高。
tips:flex-basis和width为auto值，那最后的空间就是根据内容多少来定的，内容多占据的水平空间就多。

 */
.col-1 {
    flex: 0 0 8.333333%;
}

.col-2 {
    flex: 0 0 16.666667%;
}

.col-3 {
    flex: 0 0 25%;
}

.col-4 {
    flex: 0 0 33.333333%;
}

.col-5 {
    flex: 0 0 41.666667%;
}

.col-6 {
    flex: 0 0 50%;
}


.col-7 {
    flex: 0 0 58.333333%;
}

.col-8 {
    flex: 0 0 66.666667%;
}

.col-9 {
    flex: 0 0 75%;
}

.col-10 {
    flex: 0 0 83.333333%;
}

.col-11 {
    flex: 0 0 91.666667%;
}

.col-12 {
    flex: 0 0 100%;
}

/* 自适应宽度的flex元素 */
.fruid-col-1 {
    flex: 1 1 8.333333%;
}

.fruid-col-2 {
    flex: 1 1 16.666667%;
}

.fruid-col-3 {
    flex: 1 1 25%;
}

.fruid-col-4 {
    flex: 1 1 33.333333%;
}

.fruid-col-5 {
    flex: 1 1 41.666667%;
}

.fruid-col-6 {
    flex: 1 1 50%;
}

.fruid-col-7 {
    flex: 1 1 58.333333%;
}

.fruid-col-8 {
    flex: 1 1 66.666667%;
}

.fruid-col-9 {
    flex: 1 1 75%;
}

.fruid-col-10 {
    flex: 1 1 83.333333%;
}

.fruid-col-11 {
    flex: 1 1 91.666667%;
}

.fruid-col-12 {
    flex: 1 1 100%;
}


/*
-------------------------offset设置----------------------
-------------------------offset设置----------------------
-------------------------offset设置----------------------
-------------------------offset设置----------------------
-------------------------offset设置----------------------
 */
.offset-l-1 {
    margin-left: 8.333333%;
}

.offset-l-2 {
    margin-left: 16.666667%;
}

.offset-l-3 {
    margin-left: 25%;
}

.offset-l-4 {
    margin-left: 33.333333%;
}

.offset-l-5 {
    margin-left: 41.666667%;
}

.offset-l-6 {
    margin-left: 50%;
}

.offset-r-1 {
    margin-right: 8.333333%;
}

.offset-r-2 {
    margin-right: 16.666667%;
}

.offset-r-3 {
    margin-right: 25%;
}

.offset-r-4 {
    margin-right: 33.333333%;
}

.offset-r-5 {
    margin-right: 41.666667%;
}

.offset-r-6 {
    margin-right: 50%;
}


/*
----------------------------margin设置-----------------------------
----------------------------margin设置-----------------------------
----------------------------margin设置-----------------------------
----------------------------margin设置-----------------------------
----------------------------margin设置-----------------------------
----------------------------margin设置-----------------------------
 */
/*
不过你可能也发现了不论是 margin: auto; 还是 margin: 0 auto; 效果都是一样的，都是让 #demo 水平居中了，但纵向并没有任何变化。
块级元素设置居中的前提是设置了width，若在css中没写width则会默认占据100%的宽度。
auto指平分剩余空间 比如上图中我父div宽度为200px，子div宽度为100px,则水平方向平分剩余宽度为(200-100)/2
怎么实现垂直方向居中
margin:0 auto 0 0，只给了右边设置了auto相当于让右边自己平分剩余空间，即把父div的剩余空间全都给了右侧
为什么margin:auto不能实现在垂直方向上的居中呢？
 因为默认垂直方向上没有剩余空间
 如果子元素设置了绝对定位且四边都设为0，子元素会填充整个父元素的所有剩余空间，auto就能平均分配水平和垂直方向的剩余空间了。
*/
.m-auto {
    margin: auto;
}

.mt-auto {
    margin-top: auto;
}

.mr-auto {
    margin-right: auto;
}

.mb-auto {
    margin-bottom: auto;
}

.ml-auto {
    margin-left: auto;
}


.m-0 {
    margin: 0;
}


.m-1 {
    margin: 0.25rem;
}

.mt-1 {
    margin-top: 0.25rem;
}

.mr-1 {
    margin-right: 0.25rem;
}

.mb-1 {
    margin-bottom: 0.25rem;
}

.ml-1 {
    margin-left: 0.25rem;
}

.m-2 {
    margin: 0.5rem;
}

.mt-2 {
    margin-top: 0.5rem;
}

.mr-2 {
    margin-right: 0.5rem;
}

.mb-2 {
    margin-bottom: 0.5rem;
}

.ml-2 {
    margin-left: 0.5rem;
}

.m-3 {
    margin: 1rem;
}

.mt-3 {
    margin-top: 1rem;
}

.mr-3 {
    margin-right: 1rem;
}

.mb-3 {
    margin-bottom: 1rem;
}

.ml-3 {
    margin-left: 1rem;
}

.m-4 {
    margin: 1.5rem;
}

.mt-4 {
    margin-top: 1.5rem;
}

.mr-4 {
    margin-right: 1.5rem;
}

.mb-4 {
    margin-bottom: 1.5rem;
}

.ml-4 {
    margin-left: 1.5rem;
}

.m-5 {
    margin: 3rem;
}

.mt-5 {
    margin-top: 3rem;
}

.mr-5 {
    margin-right: 3rem;
}

.mb-5 {
    margin-bottom: 3rem;
}

.ml-5 {
    margin-left: 3rem;
}

/*
-------------------------padding设置-----------------------------
-------------------------padding设置-----------------------------
-------------------------padding设置-----------------------------
-------------------------padding设置-----------------------------
-------------------------padding设置-----------------------------
 */
.p-0 {
    padding: 0;
}

.p-1 {
    padding: 0.25rem;
}

.pt-1 {
    padding-top: 0.25rem;
}

.pr-1 {
    padding-right: 0.25rem;
}

.pb-1 {
    padding-bottom: 0.25rem;
}

.pl-1 {
    padding-left: 0.25rem;
}

.p-2 {
    padding: 0.5rem;
}

.pt-2 {
    padding-top: 0.5rem;
}

.pr-2 {
    padding-right: 0.5rem;
}

.pb-2 {
    padding-bottom: 0.5rem;
}

.pl-2 {
    padding-left: 0.5rem;
}

.p-3 {
    padding: 1rem;
}

.pt-3 {
    padding-top: 1rem;
}

.pr-3 {
    padding-right: 1rem;
}

.pb-3 {
    padding-bottom: 1rem;
}

.pl-3 {
    padding-left: 1rem;
}

.p-4 {
    padding: 1.5rem;
}

.pt-4 {
    padding-top: 1.5rem;
}

.pr-4 {
    padding-right: 1.5rem;
}

.pb-4 {
    padding-bottom: 1.5rem;
}

.pl-4 {
    padding-left: 1.5rem;
}

.p-5 {
    padding: 3rem;
}

.pt-5 {
    padding-top: 3rem;
}

.pr-5 {
    padding-right: 3rem;
}

.pb-5 {
    padding-bottom: 3rem;
}

.pl-5 {
    padding-left: 3rem;
}


/*
------------------------------magin反向----------------------------
------------------------------magin反向----------------------------
------------------------------magin反向----------------------------
------------------------------magin反向----------------------------
------------------------------magin反向----------------------------
------------------------------magin反向----------------------------
 */

.mt-n1 {
    margin-top: -0.25rem;
}

.mr-n1 {
    margin-right: -0.25rem;
}

.mb-n1 {
    margin-bottom: -0.25rem;
}

.ml-n1 {
    margin-left: -0.25rem;
}

.mt-n2 {
    margin-top: -0.5rem;
}

.mr-n2 {
    margin-right: -0.5rem;
}

.mb-n2 {
    margin-bottom: -0.5rem;
}

.ml-n2 {
    margin-left: -0.5rem;
}

.mt-n3 {
    margin-top: -1rem;
}

.mr-n3 {
    margin-right: -1rem;
}

.mb-n3 {
    margin-bottom: -1rem;
}

.ml-n3 {
    margin-left: -1rem;
}


.mt-n4 {
    margin-top: -1.5rem;
}

.mr-n4 {
    margin-right: -1.5rem;
}

.mb-n4 {
    margin-bottom: -1.5rem;
}

.ml-n4 {
    margin-left: -1.5rem;
}


.mt-n5 {
    margin-top: -3rem;
}

.mr-n5 {
    margin-right: -3rem;
}

.mb-n5 {
    margin-bottom: -3rem;
}

.ml-n5 {
    margin-left: -3rem;
}


/*
------------------------------常用的样式设置-------------------------------
------------------------------常用的样式设置-------------------------------
------------------------------常用的样式设置-------------------------------
------------------------------常用的样式设置-------------------------------
------------------------------常用的样式设置-------------------------------
 */

/* 边框 */
.border {
    border: 1px solid #f0f2f7;
}

.border-bottom {
    border-bottom: 1px solid #f0f2f7;
}

/* 边框圆矩效果 */
.tiny-round {
    border-radius: 3px;
}

.normal-round {
    border-radius: 10px;
}

.large-round {
    border-radius: 20px;
}
/*成为圆圈，但宽度和高度需要一致*/
.circle-round {
    border-radius: 50%;
}

/* 阴影 */
.shadow {
    box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2);
}


/* 背景色 */
.fill-blue {
    background-color: #0c89ff;
}

.fill-light-blue {
    background-color: #ecf6ff;
}

.fill-grey {
    background-color: #8591a7;
}

.fill-light-grey {
    background-color: #f6f6f6;
}

.fill-white {
    background-color: #ffffff;
}

/* 前景色
 前景颜色通常是用于绘制线条、文字、形状等图形元素的颜色，而背景颜色则是用于填充背景的颜色。
 */
.blue {
    color: #0c89ff;
}

.deep-blue {
    color: #175199;
}

.light-grey {
    color: #8591a7;
}

.grey {
    color: #444444;
}


/* 加粗
CSS 属性指定了字体的粗细程度。 一些字体只提供 normal 和 bold 两种值
*/
.strong {
    font-weight: 600;
}

/* 标题字体 */
.title {
    font-size: 20px;
    font-weight: 600;
    color: #1a1a1a;
}

.sub-title {
    color: #1a1a1a;
    font-size: 18px;
    font-weight: 600;
}

/* 标注字体 */
.meta {
    font-size: 12px;
    color: #8590a6;
}

/* 中等字体*/
.normal-font {
    font-size: 14px;
}

/* 鼠标手型 */
.link {
    cursor: pointer;
}

/* 图标填充 */
.grey-icon {
    fill: #8591a7;
}

.blue-icon {
    fill: #0c89ff;
}

.deep-blue-icon {
    fill: #175199;
}

/* 两行省略号 */
.ellipsis {
    /*
    display:box;
　　在元素上设置该属性，可使其子代排列在同一水平上，类似display:inline-block;
　前提：使用如下属性，必须在父代设置display:box;
　　1.box-flex:number;
　　　　1）占父级元素宽度的number份
　　　　2）若子元素设置固定宽度，则该子元素应用固定宽度，其他未设置固定宽度的字元素将余下的父级宽度（父级-已设置固定宽度的子代元素的总宽度按　number占份数
　　　　3）若子元素有margin值，则按余下（父级宽度-子代固定总宽度-总margin值）宽度占number份
　　2.box-orient:horizontal/vertical
　　　　在父级上设置该属性，则子代按水平排列或竖直排列。
　　　　注：所有主流浏览器不支持该属性，必须加上前缀。
　　　　1）horizontal  水平排列，子代总width=父级width。若父级固定宽度，则子代设置的width无效，子代会撑满父级宽度。
　　　　2）vertical  垂直排列，子代总height=父级height。若父级固定高度，则子代设置的height无效，子代会撑满父级高度。
　　3.box-direction:normal/reverse
　　　　在父级上设置该属性，确认子代的排列顺序。
　　　　1）normal  默认值，子代按html顺序排列
　　　　2）reverse  反序
　　4.box-align:start/end/center/stretch
　　　　在父级设置，子代的垂直对齐方式。
　　　　1）start  垂直顶部对齐
　　　　2）end 垂直底部对齐
　　　　3）center 垂直居中对齐
　　　　4）stretch 拉伸子代的高度，与父级设置的高度一致。子代height无效。
　　5.box-pack:start/end/center
　　　　在父级设置，子代的水平对齐方式。
　　　　1）start  水平左对齐
　　　　2）end  水平右对齐
　　　　3）center  水平居中对齐
    */
    display: -webkit-box;
    -webkit-box-orient: vertical;
    /**
    -webkit-line-clamp CSS 属性可以把块容器中的内容限制为指定的行数。
它只有在 display 属性设置成 -webkit-box 或者 -webkit-inline-box 并且 box-orient 属性设置成 vertical时才有效果。
在大部分情况下，也需要设置 overflow 属性为 hidden，否则，里面的内容不会被裁减，并且在内容显示为指定行数后还会显示省略号。
     */
    -webkit-line-clamp: 2;
    /*
overflow的三种取值：
auto：自适应，内容如果溢出，会自动生成滚动条
scroll：将超出的内容进行裁剪（也就是不显示），并以滚动条的方式显示超出的内容（若不设置隐藏滚动条，滚动条一直存在）。
hidden：将超出内容进行裁剪，不会出现滚动条。
    */
    overflow: hidden;
}

/* 四行省略号 */
.ellipsis-4 {
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 4;
    overflow: hidden;
}

/* 蓝色填充按钮 */
.blue-fill-btn {
    width: 70px;
    height: 35px;
    border-radius: 5px;
    background-color: #0c89ff;
    color: #fff;
}

/* 蓝色文本按钮 */
.blue-txt-btn {
    height: 35px;
    border-radius: 5px;
    background-color: #ecf6ff;
    color: #0c89ff;
}
/*
min-height属性定义及用法在css中，min-height属性是使用来定义元素的最小高度，
就是元素可以比指定值高，但不能比其矮。 当元素内容过多时最小高度装不下后，元素的高度将随内容增加而增加。
该属性不允许指定负值，设置的最小高度不包括填充，边框，或页边距。
*/
.card {
    min-height: 200px;
}

/* 图片包裹元素 */
.img-wrapper img {
    width: 100%;
    height: 100%;
}


/* flex元素在父容器中的显示顺序
order: number|initial|inherit;
number	默认值为 0。规定弹性项目的顺序。
initial	将此属性设置为其默认值。参阅 initial。
inherit	从其父元素继承此属性。参阅 inherit。
*/
.order-first {
    order: -1;
}

.order-last {
    order: 13;
}

.order-0 {
    order: 0;
}

.order-1 {
    order: 1;
}

.order-2 {
    order: 2;
}

.order-3 {
    order: 3;
}

.order-4 {
    order: 4;
}

.order-5 {
    order: 5;
}

.order-6 {
    order: 6;
}

.order-7 {
    order: 7;
}

.order-8 {
    order: 8;
}

.order-9 {
    order: 9;
}

.order-10 {
    order: 10;
}

.order-11 {
    order: 11;
}

.order-12 {
    order: 12;
}

/****
***********************************附件*********************************
***********************************附件*********************************
***********************************附件*********************************
***********************************附件*********************************
***********************************附件*********************************
 */
.f-start{
    display: flex;
    justify-content: flex-start;
    align-items: center;
}

.f-center{
    display:flex;
    justify-content: center;
    align-items: center;
}

.f-end{
    display:flex;
    justify-content: flex-end;
    align-items: center;
}
.f-between{
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.f-around{
    display: flex;
    justify-content: space-around; /* 均分 */
    align-items: center;
}
